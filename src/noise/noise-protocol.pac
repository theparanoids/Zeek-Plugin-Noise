# Generated by binpac_quickstart

# ## TODO: Add your protocol structures in here.
# ## some examples:

# Types are your basic building blocks.
# There are some builtins, or you can define your own.
# Here's a definition for a regular expression:
# type NOISE_WHITESPACE = RE/[ \t]*/;

# A record is a collection of types.
# Here's one with the built-in types
# type example = record {
# 	
# };


type NOISE_PDU = record {
        itype: uint8;
	res_zero:	padding[3];
	#data: bytestring &restofdata;
	data: case itype of {
		1 -> iinitial: NOISE_INITIATION;
		2 -> iresponse: NOISE_RESPONSE;
		3 -> icookie: NOISE_COOKIE;
    		4 -> itransport: NOISE_TRANSPORT;
	};
} &byteorder=bigendian;

type NOISE_INITIATION = record {
        sender_index:  uint32 &byteorder=littleendian;
	unenc:  bytestring &length=32;
	enc_static:	bytestring &length=48;
	enc_timestamp:	bytestring &length=28;
	mac1:		bytestring &length=16;
	mac2:		bytestring &length=16;
};

type NOISE_RESPONSE = record {
        sender_index:          uint32 &byteorder=littleendian;
        receiver_index:         uint32 &byteorder=littleendian;
        unenc_ephemeral:        bytestring &length=32;
        enc_nothing:            bytestring &length=16;
        mac1:                   bytestring &length=16;
        mac2:                   bytestring &length=16;
};


type NOISE_COOKIE = record {
        receiver_index:         uint32 &byteorder=littleendian;
        nonce:                  bytestring &length=256; 
        encrypted_cookie:       uint8[32];
};

type NOISE_TRANSPORT = record {
        receiver_index:                uint32 &byteorder=littleendian;
        counter:      uint64 &byteorder=littleendian;
        enc_packet:    bytestring &restofdata;
};


