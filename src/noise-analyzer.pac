# Generated by binpac_quickstart

connection NOISE_Conn(bro_analyzer: BroAnalyzer) {
  upflow = NOISE_Flow(true);
  downflow = NOISE_Flow(false);
  };


flow NOISE_Flow(is_orig:bool)
{

	datagram = NOISE_PDU withcontext(connection,this);

	function proc_noise_message(msg: NOISE_PDU): bool
		%{
                if ( ${msg.itype} == 1 ) 
			BifEvent::generate_noise_event(connection()->bro_analyzer(), connection()->bro_analyzer()->Conn(), ${msg.itype},
		${msg.iinitial.sender_index}, 
		bytestring_to_val(${msg.iinitial.unenc}),
		bytestring_to_val(${msg.iinitial.enc_static}),
		bytestring_to_val(${msg.iinitial.enc_timestamp}),
		bytestring_to_val(${msg.iinitial.mac1}),
		bytestring_to_val(${msg.iinitial.mac2})
                  );
		return true;
		%}

	function proc_noise_initiation(msg: NOISE_INITIATION): bool
		%{
                        BifEvent::generate_noise_initiation(connection()->bro_analyzer(), connection()->bro_analyzer()->Conn(),
                ${msg.sender_index},
                bytestring_to_val(${msg.unenc}),
                bytestring_to_val(${msg.enc_static}),
                bytestring_to_val(${msg.enc_timestamp}),
                bytestring_to_val(${msg.mac1}),
                bytestring_to_val(${msg.mac2})

                  );
		return true;
		%}
 

        function proc_noise_response(msg: NOISE_RESPONSE): bool
                %{
                        BifEvent::generate_noise_response(connection()->bro_analyzer(), connection()->bro_analyzer()->Conn(),
		${msg.sender_index},
		${msg.receiver_index},
                bytestring_to_val(${msg.unenc_ephemeral}),
                bytestring_to_val(${msg.enc_nothing}),
                bytestring_to_val(${msg.mac1}),
                bytestring_to_val(${msg.mac2})
                  );
                return true;
                %}

        function proc_noise_cookie(msg: NOISE_COOKIE): bool
                %{
                   BifEvent::generate_noise_cookie(connection()->bro_analyzer(), connection()->bro_analyzer()->Conn(),
                ${msg.receiver_index}
                  );
                return true;
                %}

        function proc_noise_transport(msg: NOISE_TRANSPORT): bool
                %{
                   BifEvent::generate_noise_transport(connection()->bro_analyzer(), connection()->bro_analyzer()->Conn(),
                ${msg.receiver_index},
		${msg.counter}
                  );
                return true;
                %}
};


refine typeattr NOISE_PDU += &let {
	proc: bool = $context.flow.proc_noise_message(this);
}

refine typeattr NOISE_INITIATION += &let {
	proc: bool = $context.flow.proc_noise_initiation(this);
}

refine typeattr NOISE_RESPONSE += &let {
        proc: bool = $context.flow.proc_noise_response(this);
}

refine typeattr NOISE_COOKIE += &let {
        proc: bool = $context.flow.proc_noise_cookie(this);
}

refine typeattr NOISE_TRANSPORT += &let {
        proc: bool = $context.flow.proc_noise_transport(this);
}

